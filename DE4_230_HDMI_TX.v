// --------------------------------------------------------------------
// Copyright (c) 2007 by Terasic Technologies Inc. 
// --------------------------------------------------------------------
//
// Permission:
//
//   Terasic grants permission to use and modify this code for use
//   in synthesis for all Terasic Development Boards and Altera Development 
//   Kits made by Terasic.  Other use of this code, including the selling 
//   ,duplication, or modification of any portion is strictly prohibited.
//
// Disclaimer:
//
//   This VHDL/Verilog or C/C++ source code is intended as a design reference
//   which illustrates how these types of functions can be implemented.
//   It is the user's responsibility to verify their design for
//   consistency and functionality through the use of formal
//   verification methods.  Terasic provides no warranty regarding the use 
//   or functionality of this code.
//
// --------------------------------------------------------------------
//           
//                     Terasic Technologies Inc
//                     356 Fu-Shin E. Rd Sec. 1. JhuBei City,
//                     HsinChu County, Taiwan
//                     302
//
//                     web: http://www.terasic.com/
//                     email: support@terasic.com
//
// --------------------------------------------------------------------
// --------------------------------------------------------------------
//
// Major Functions:	HDMI TX only 
//
// --------------------------------------------------------------------
//
// Revision History :
// --------------------------------------------------------------------
//   Ver  :| Author            :| Mod. Date :| Changes Made:
//   V1.0 :| Allen  Wang       :| 10/25/10  :| Initial Revision
//   V1.1 :| Tony   Zhou       :| 3/8/2011  :| support to HDMI 1.4

//---------------------------------------------------------------------
`include "vpg_source\vpg.h"

//                                                                        Questo è il progetto in cui sostituisco il pattern VGA di prova con i dati provenienti
//                                                                         dalla camera. Si utilizzerà un framebuffer per portare la trasmissione di pixel a 27Mhz

//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
module DE4_230_HDMI_TX( 
		
		////////// CLOCK //////////
		OSC_50_BANK6,

		////////// LED //////////
		LED,  

		////////// BUTTON //////////
		BUTTON,
		
		/////////  CAMERA SELECT //////////

		CAMERA_SEL,
		
		/////////  OV7670 CAMERA INTERFACE (1) //////////
		
		CLR,
		VSYNC_CAMERA,
		HREF,
		DATA,
		RESEND_REGISTERS,
		SIOD,
		CONFIG_FINISHED,
		SIOC,
		PWDN,
		XCLK,
		RESET,
		PCLK,
		
		/////////  OV7670 CAMERA INTERFACE (2) //////////
		
		CLR2,
		VSYNC_CAMERA2,
		HREF2,
		DATA2,
		RESEND_REGISTERS2,
		SIOD2,
		CONFIG_FINISHED2,
		SIOC2,
		PWDN2,
		XCLK2,
		RESET2,
		PCLK2,

		////////// HSMC Port A and Port B  //////////
//		HDMI_SDA,
//		HDMI_SCL,
		HDMI_TX_RD,
		HDMI_TX_GD,
		HDMI_TX_PCSCL,
		HDMI_TX_PCSDA,
		HDMI_TX_RST_N,
		HDMI_TX_INT_N,
		HDMI_TX_DSD_L,
		HDMI_TX_DSD_R,
		HDMI_TX_BD,
		HDMI_TX_PCLK,
		HDMI_TX_DCLK,
		HDMI_TX_SCK,
		HDMI_TX_WS,
		HDMI_TX_MCLK,
		HDMI_TX_I2S,
		HDMI_TX_DE,
		HDMI_TX_VS,
		HDMI_TX_HS,
		HDMI_TX_SPDIF,
		HDMI_TX_CEC
	);

//=======================================================
//  PARAMETER declarations
//=======================================================

//=======================================================
//  PORT declarations
//=======================================================

////////// CLOCK //////////
input									OSC_50_BANK6;


////////// LED //////////
output    	[3:0]           	LED;

////////// BUTTON //////////
input     	[1:0]           	BUTTON;

/////////  CAMERA SELECT ///////////

input                         CAMERA_SEL;

///////// OV7670 CAMERA INTERFACE (1) ///////////

input                         PCLK;
input	                        CLR;
input                         VSYNC_CAMERA;
input	                        HREF;
input	      [7:0]             DATA;
input                         RESEND_REGISTERS;
inout                         SIOD;
output                        CONFIG_FINISHED;
output 		                  SIOC;
output		                  PWDN;
output		                  XCLK;
output                  		RESET;

///////// OV7670 CAMERA INTERFACE (2) ///////////

input                         PCLK2;
input	                        CLR2;
input                         VSYNC_CAMERA2;
input	                        HREF2;
input	      [7:0]             DATA2;
input                         RESEND_REGISTERS2;
inout                         SIOD2;
output                        CONFIG_FINISHED2;
output 		                  SIOC2;
output		                  PWDN2;
output		                  XCLK2;
output                  		RESET2;

////////// HSMC Port A and Port B  //////////
output    	[11:0]          	HDMI_TX_RD;
//inout                     	HDMI_SDA;
//output                    	HDMI_SCL;
output                    		HDMI_TX_PCSCL;
inout                     		HDMI_TX_PCSDA;
output                    		HDMI_TX_RST_N;
input                     		HDMI_TX_INT_N;
output    	[11:0]          	HDMI_TX_GD;
output                    		HDMI_TX_PCLK;
output    	[3:0]           	HDMI_TX_DSD_L;
output    	[3:0]           	HDMI_TX_DSD_R;
output                    		HDMI_TX_DCLK;
output                    		HDMI_TX_SCK;
output                    		HDMI_TX_WS;
output                    		HDMI_TX_MCLK;
output    	[3:0]           	HDMI_TX_I2S;
output    	[11:0]          	HDMI_TX_BD;
output                    		HDMI_TX_DE;
output                    		HDMI_TX_VS;
output                    		HDMI_TX_HS;
output                    		HDMI_TX_SPDIF;
inout                     		HDMI_TX_CEC;

//=======================================================
//  REG/WIRE declarations
//=======================================================


wire reset_n;
wire pll_100M;

wire gen_sck;
wire gen_i2s;
wire gen_ws;

wire clk27;

sys_pll sys_pll_inst(
							.areset(1'b0),
							.inclk0(OSC_50_BANK6),
							.c0    (pll_100M),
							.c1    (gen_sck),
							.locked(reset_n)
						  );


ALTPLa pll_27(
					.areset(1'b0),
					.inclk0(OSC_50_BANK6),
					.c0    (clk27)
              );
						  




DE4_230_HDMI_TX_SOPC     U1   (
                                 // 1) global signals:
                                  .clk(pll_100M),
                                  //.pll_cpu(),
                                  //.pll_io(),
                                  .reset_n(reset_n),

                                 // the_hdmi_tx_disp_mode
                                 //.out_port_from_the_hdmi_tx_disp_mode       (vpg_disp_mode),

                                 // the_hdmi_tx_i2c_scl
                                  .out_port_from_the_hdmi_tx_i2c_scl         (HDMI_TX_PCSCL),

                                 // the_hdmi_tx_i2c_sda
                                  .bidir_port_to_and_from_the_hdmi_tx_i2c_sda(HDMI_TX_PCSDA),

                                 // the_hdmi_tx_irq_n
                                  .in_port_to_the_hdmi_tx_irq_n              (HDMI_TX_INT_N),

                                 // the_hdmi_tx_mode_change
                                 //.out_port_from_the_hdmi_tx_mode_change     (vpg_disp_mode_change),

                                 // the_hdmi_tx_reset_n
                                  .out_port_from_the_hdmi_tx_reset_n         (HDMI_TX_RST_N),

                                 // the_hdmi_tx_vpg_color
                                  .out_port_from_the_hdmi_tx_vpg_color       (vpg_disp_color),

                                 // the_i2s_tx
                                  .i2s_sck_to_the_i2s_tx                     (gen_sck),
                                  .i2s_sd_from_the_i2s_tx                    (gen_i2s),
                                  .i2s_ws_from_the_i2s_tx                    (gen_ws),

                                 // the_pio_button
                                  .in_port_to_the_pio_button                 (BUTTON),

                                 // the_pio_led
                                  .out_port_from_the_pio_led                 (LED[3:0]),

                                 // the_pll
                                  .locked_from_the_pll(),
                                  .phasedone_from_the_pll()
                               )
;


					
//============================ CAMERA 1 ==============================

wire HSYNC;
wire VSYNC;
wire DATA_ENABLE;
wire [8:0] DATA_OUT;
wire [2:0] VGA_RED;
wire [2:0] VGA_GREEN;
wire [2:0] VGA_BLUE;


top_module CAMERA1 (.clr(CLR),
					.clk27(clk27),
					.clk50(OSC_50_BANK6),
					.pclk(PCLK),
					.vsync(VSYNC_CAMERA),
					.href(HREF),
					.data(DATA),
					.resend_registers(RESEND_REGISTERS),
					.vga_hsync(HSYNC),
					.vga_vsync(VSYNC),
					.data_out(DATA_OUT),
					.config_finished(CONFIG_FINISHED),
					.sioc(SIOC),
					.siod(SIOD),
					.pwdn(PWDN),
					.xclk(XCLK),
					.reset(RESET),
					.data_enable(DATA_ENABLE)
					);

					  					  
assign VGA_RED   = DATA_OUT[8:6];
assign VGA_GREEN = DATA_OUT[5:3];
assign VGA_BLUE  = DATA_OUT[2:0];					

		
//=========================== CAMERA 2 ===============================
		
wire HSYNC2;
wire VSYNC2;
wire DATA_ENABLE2;
wire [8:0] DATA_OUT2;
wire [2:0] VGA_RED2;
wire [2:0] VGA_GREEN2;
wire [2:0] VGA_BLUE2;		
		
top_module CAMERA2 (.clr(CLR2),
					.clk27(clk27),
					.clk50(OSC_50_BANK6),
					.pclk(PCLK2),
					.vsync(VSYNC_CAMERA2),
					.href(HREF2),
					.data(DATA2),
					.resend_registers(RESEND_REGISTERS2),
					.vga_hsync(HSYNC2),
					.vga_vsync(VSYNC2),
					.data_out(DATA_OUT2),
					.config_finished(CONFIG_FINISHED2),
					.sioc(SIOC2),
					.siod(SIOD2),
					.pwdn(PWDN2),
					.xclk(XCLK2),
					.reset(RESET2),
					.data_enable(DATA_ENABLE2)
					); 

		
assign VGA_RED2   = DATA_OUT2[8:6];
assign VGA_GREEN2 = DATA_OUT2[5:3];
assign VGA_BLUE2  = DATA_OUT2[2:0];	
					



//============================ CAMERA SELECT MUX FOR OUTPUT ==================================

assign HDMI_TX_DE = CAMERA_SEL? DATA_ENABLE2               : DATA_ENABLE;
assign HDMI_TX_HS = CAMERA_SEL? HSYNC2                     : HSYNC;
assign HDMI_TX_VS = CAMERA_SEL? VSYNC2                     : VSYNC;
assign HDMI_TX_RD = CAMERA_SEL? {VGA_RED2,9'b000000000}    : {VGA_RED,9'b000000000};
assign HDMI_TX_GD = CAMERA_SEL? {VGA_GREEN2,9'b000000000}  : {VGA_GREEN,9'b000000000};
assign HDMI_TX_BD = CAMERA_SEL? {VGA_BLUE2,9'b000000000}   : {VGA_BLUE,9'b000000000};

assign HDMI_TX_PCLK= ~clk27;


											

											
assign HDMI_TX_SCK = gen_sck;
assign HDMI_TX_I2S = {gen_i2s, gen_i2s, gen_i2s, gen_i2s};
assign HDMI_TX_WS  = gen_ws;														
												
endmodule
